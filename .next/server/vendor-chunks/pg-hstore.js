/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg-hstore";
exports.ids = ["vendor-chunks/pg-hstore"];
exports.modules = {

/***/ "(rsc)/./node_modules/pg-hstore/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/pg-hstore/lib/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function () {\r\n  var _ = __webpack_require__(/*! underscore */ \"(rsc)/./node_modules/underscore/modules/index-all.js\");\r\n\r\n  function sanitize_input(input) {\r\n    // http://www.postgresql.org/docs/9.0/static/sql-syntax-lexical.html [4.1.2.1-4.1.2.2]\r\n    // single quotes (') must be replaced with double single quotes ('')\r\n    input = input.replace(/'/g, '\\'\\'');\r\n    // backslashes (\\) must be replaced with double backslashes (\\\\)\r\n    input = input.replace(/\\\\/g, '\\\\\\\\');\r\n    // double quotes (\") must be replaced with escaped quotes (\\\\\")\r\n    input = input.replace(/\"/g, '\\\\\"');\r\n    return input;\r\n  }\r\n\r\n  function to_string(input, sanitize) {\r\n    switch(typeof input) {\r\n      case 'boolean':\r\n      case 'number':\r\n      case 'object':\r\n        return String(input);\r\n      case 'string':\r\n        return sanitize ? sanitize_input(input) : input;\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  module.exports = function (options) {\r\n    options = _.defaults({}, options, { sanitize: false });\r\n\r\n    return {\r\n      stringify: function (data, callback) {\r\n        var hstore = Object.keys(data).map(function (key) {\r\n          if (data[key] === null) {\r\n            return '\"'+to_string(key, options.sanitize)+'\"=>NULL';\r\n          } else {\r\n            return '\"'+to_string(key, options.sanitize)+'\"=>\"'+to_string(data[key], options.sanitize)+'\"';\r\n          }\r\n        });\r\n        var joined = hstore.join();\r\n        if (!callback || callback === null) return joined;\r\n        callback(joined);\r\n      },\r\n\r\n      parse: function(string, callback) {\r\n        var result = {},\r\n        //using [\\s\\S] to match any character, including line feed and carriage return,\r\n            r = /([\"])(?:\\\\\\1|\\\\\\\\|[\\s\\S])*?\\1|NULL/g,\r\n            matches = string.match(r),\r\n            i,\r\n            l,\r\n            clean = function (value) {\r\n                // Remove leading double quotes\r\n                value = value.replace(/^\\\"|\\\"$/g, \"\");\r\n                // Unescape quotes\r\n                value = value.replace(/\\\\\"/g, \"\\\"\");\r\n                //Unescape backslashes\r\n                value = value.replace(/\\\\\\\\/g,\"\\\\\");\r\n                //Unescape single quotes\r\n                value = value.replace(/''/g,\"'\");\r\n\r\n                return value;\r\n            };\r\n\r\n        if(matches) {\r\n          for (i = 0, l = matches.length; i < l; i+= 2) {\r\n            if (matches[i] && matches[i + 1]) {\r\n              var key = clean(matches[i]);\r\n              var value = matches[i + 1];\r\n              result[key] = value==\"NULL\"?null:clean(value);\r\n            }\r\n          }\r\n        }\r\n        if (!callback || callback === null) return result;\r\n        callback(result);\r\n      }\r\n    };\r\n  };\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcGctaHN0b3JlL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFVBQVUsbUJBQU8sQ0FBQyx3RUFBWTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGFBQWEsaUJBQWlCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU87QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Jvb21ib29rZXIvLi9ub2RlX21vZHVsZXMvcGctaHN0b3JlL2xpYi9pbmRleC5qcz9hMmYxIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XHJcblxyXG4gIGZ1bmN0aW9uIHNhbml0aXplX2lucHV0KGlucHV0KSB7XHJcbiAgICAvLyBodHRwOi8vd3d3LnBvc3RncmVzcWwub3JnL2RvY3MvOS4wL3N0YXRpYy9zcWwtc3ludGF4LWxleGljYWwuaHRtbCBbNC4xLjIuMS00LjEuMi4yXVxyXG4gICAgLy8gc2luZ2xlIHF1b3RlcyAoJykgbXVzdCBiZSByZXBsYWNlZCB3aXRoIGRvdWJsZSBzaW5nbGUgcXVvdGVzICgnJylcclxuICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZSgvJy9nLCAnXFwnXFwnJyk7XHJcbiAgICAvLyBiYWNrc2xhc2hlcyAoXFwpIG11c3QgYmUgcmVwbGFjZWQgd2l0aCBkb3VibGUgYmFja3NsYXNoZXMgKFxcXFwpXHJcbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJ1xcXFxcXFxcJyk7XHJcbiAgICAvLyBkb3VibGUgcXVvdGVzIChcIikgbXVzdCBiZSByZXBsYWNlZCB3aXRoIGVzY2FwZWQgcXVvdGVzIChcXFxcXCIpXHJcbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoL1wiL2csICdcXFxcXCInKTtcclxuICAgIHJldHVybiBpbnB1dDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRvX3N0cmluZyhpbnB1dCwgc2FuaXRpemUpIHtcclxuICAgIHN3aXRjaCh0eXBlb2YgaW5wdXQpIHtcclxuICAgICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICAgIGNhc2UgJ251bWJlcic6XHJcbiAgICAgIGNhc2UgJ29iamVjdCc6XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpbnB1dCk7XHJcbiAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgcmV0dXJuIHNhbml0aXplID8gc2FuaXRpemVfaW5wdXQoaW5wdXQpIDogaW5wdXQ7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgb3B0aW9ucyA9IF8uZGVmYXVsdHMoe30sIG9wdGlvbnMsIHsgc2FuaXRpemU6IGZhbHNlIH0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIGhzdG9yZSA9IE9iamVjdC5rZXlzKGRhdGEpLm1hcChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICBpZiAoZGF0YVtrZXldID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnXCInK3RvX3N0cmluZyhrZXksIG9wdGlvbnMuc2FuaXRpemUpKydcIj0+TlVMTCc7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJ1wiJyt0b19zdHJpbmcoa2V5LCBvcHRpb25zLnNhbml0aXplKSsnXCI9PlwiJyt0b19zdHJpbmcoZGF0YVtrZXldLCBvcHRpb25zLnNhbml0aXplKSsnXCInO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBqb2luZWQgPSBoc3RvcmUuam9pbigpO1xyXG4gICAgICAgIGlmICghY2FsbGJhY2sgfHwgY2FsbGJhY2sgPT09IG51bGwpIHJldHVybiBqb2luZWQ7XHJcbiAgICAgICAgY2FsbGJhY2soam9pbmVkKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHBhcnNlOiBmdW5jdGlvbihzdHJpbmcsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9LFxyXG4gICAgICAgIC8vdXNpbmcgW1xcc1xcU10gdG8gbWF0Y2ggYW55IGNoYXJhY3RlciwgaW5jbHVkaW5nIGxpbmUgZmVlZCBhbmQgY2FycmlhZ2UgcmV0dXJuLFxyXG4gICAgICAgICAgICByID0gLyhbXCJdKSg/OlxcXFxcXDF8XFxcXFxcXFx8W1xcc1xcU10pKj9cXDF8TlVMTC9nLFxyXG4gICAgICAgICAgICBtYXRjaGVzID0gc3RyaW5nLm1hdGNoKHIpLFxyXG4gICAgICAgICAgICBpLFxyXG4gICAgICAgICAgICBsLFxyXG4gICAgICAgICAgICBjbGVhbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgZG91YmxlIHF1b3Rlc1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eXFxcInxcXFwiJC9nLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIC8vIFVuZXNjYXBlIHF1b3Rlc1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFxcXCIvZywgXCJcXFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgLy9VbmVzY2FwZSBiYWNrc2xhc2hlc1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFxcXFxcXC9nLFwiXFxcXFwiKTtcclxuICAgICAgICAgICAgICAgIC8vVW5lc2NhcGUgc2luZ2xlIHF1b3Rlc1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8nJy9nLFwiJ1wiKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmKG1hdGNoZXMpIHtcclxuICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBtYXRjaGVzLmxlbmd0aDsgaSA8IGw7IGkrPSAyKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaGVzW2ldICYmIG1hdGNoZXNbaSArIDFdKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGtleSA9IGNsZWFuKG1hdGNoZXNbaV0pO1xyXG4gICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG1hdGNoZXNbaSArIDFdO1xyXG4gICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU9PVwiTlVMTFwiP251bGw6Y2xlYW4odmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghY2FsbGJhY2sgfHwgY2FsbGJhY2sgPT09IG51bGwpIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgY2FsbGJhY2socmVzdWx0KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9O1xyXG59KSgpO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/pg-hstore/lib/index.js\n");

/***/ })

};
;